# source: http://localhost:8081/graphql
# timestamp: Wed Nov 01 2017 18:05:46 GMT+0100 (CET)

input ClearCompleteTodosInput {
  userId: ID!
  clientMutationId: String
}

type ClearCompleteTodosPayload {
  deletedTodoIds: [ID]!
  user: User!
  clientMutationId: String
}

input CreateTodoInput {
  userId: ID!
  text: String!
  clientMutationId: String
}

type CreateTodoPayload {
  todoEdge: TodoEdge
  user: User!
  clientMutationId: String
}

input DeleteTodoInput {
  userId: ID!
  todoId: ID!
  clientMutationId: String
}

type DeleteTodoPayload {
  deletedId: ID!
  user: User!
  clientMutationId: String
}

input MarkTodosCompleteInput {
  userId: ID!
  complete: Boolean!
  clientMutationId: String
}

type MarkTodosCompletePayload {
  updatedTodos: [Todo]!
  user: User!
  clientMutationId: String
}

type Mutation {
  createTodo(input: CreateTodoInput!): CreateTodoPayload
  updateTodo(input: UpdateTodoInput!): UpdateTodoPayload
  deleteTodo(input: DeleteTodoInput!): DeleteTodoPayload
  markTodosComplete(input: MarkTodosCompleteInput!): MarkTodosCompletePayload
  clearCompleteTodos(input: ClearCompleteTodosInput!): ClearCompleteTodosPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  user(name: String!): User

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

enum ShowType {
  all
  active
  complete
}

# A todo item.
type Todo implements Node {
  # The ID of an object
  id: ID!

  # The text of the todo.
  text: String!
  complete: Boolean!
}

# A connection to a list of items.
type TodoConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TodoEdge]
}

# An edge in a connection.
type TodoEdge {
  # The item at the end of the edge
  node: Todo

  # A cursor for use in pagination
  cursor: String!
}

input UpdateTodoInput {
  userId: ID!
  id: ID!
  text: String!
  complete: Boolean!
  clientMutationId: String
}

type UpdateTodoPayload {
  todoEdge: TodoEdge
  user: User!
  clientMutationId: String
}

# A user.
type User implements Node {
  # The ID of an object
  id: ID!

  # The name of the user.
  name: String!

  # User's todos.
  todos(after: String, first: Int, before: String, last: Int, show: ShowType = all): TodoConnection

  # Number of user's todos.
  countTodos: Int!

  # Number of user's completed todos.
  countTodosComplete: Int!
}
